{
  "address": "0xCDa96c9D9616Ecce52CbBA4dfC9B0D88423099Fa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "creature",
          "type": "string"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "creature",
          "type": "string"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "isClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x49b8ce0c1700c9620a41b6d4bd42ff3927dfc9ac64b08a3f71038aa400280c4c",
  "receipt": {
    "to": null,
    "from": "0x274E1E9fd4356a6564fD95E2Ba5242F6e64D844d",
    "contractAddress": "0xCDa96c9D9616Ecce52CbBA4dfC9B0D88423099Fa",
    "transactionIndex": 12,
    "gasUsed": "4752118",
    "logsBloom": "0x
    "blockHash": "0x0121034e1c1b3b49efd4c59756b44c176bb3acece1d2fd39bcf248859644dd32",
    "transactionHash": "0x49b8ce0c1700c9620a41b6d4bd42ff3927dfc9ac64b08a3f71038aa400280c4c",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 10019400,
        "transactionHash": "0x49b8ce0c1700c9620a41b6d4bd42ff3927dfc9ac64b08a3f71038aa400280c4c",
        "address": "0xCDa96c9D9616Ecce52CbBA4dfC9B0D88423099Fa",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000274e1e9fd4356a6564fd95e2ba5242f6e64d844d"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x0121034e1c1b3b49efd4c59756b44c176bb3acece1d2fd39bcf248859644dd32"
      }
    ],
    "blockNumber": 10019400,
    "cumulativeGasUsed": "7955600",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1fe4549be478cc1af80780fc09cb768475822ca88620eb584119767377b7b00d"
  ],
  "numDeployments": 3,
  "solcInputHash": "82d9ab2f4bed9002f1220479fb70cb10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"creature\",\"type\":\"string\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"creature\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MerkleDistributor.sol\":\"MerkleDistributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Library.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary Base64 {\\n    bytes internal constant TABLE =\\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return '';\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\n                )\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\",\"keccak256\":\"0x53f94fdff0a6404a3306a45a7a78237e7ee350bec5079ef52e35836d585f009a\",\"license\":\"UNLICENSED\"},\"contracts/MerkleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n// import \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"./interfaces/IMerkleDistributor.sol\\\";\\nimport \\\"./Library.sol\\\";\\n\\ncontract MerkleDistributor is IMerkleDistributor, ERC721, Ownable{\\n    struct Summary {\\n        uint256 score;\\n        string creature;\\n        uint256 index;\\n    }\\n    \\n    uint256 public count = 0;  // counter of token number\\n\\n    bytes32 public immutable override merkleRoot;\\n    // This is a packed array of booleans.\\n    mapping(uint256 => uint256) private claimedBitMap;\\n    mapping(string => string) private urlMap;\\n    mapping(uint256 => Summary) private tokenSummary;\\n\\n    constructor(bytes32 merkleRoot_) public \\n        ERC721('Metacraft season pass 2022', 'MC2022')\\n        Ownable() \\n    {\\n        merkleRoot = merkleRoot_;\\n        urlMap[\\\"SlimeGolden\\\"] = \\\"ar://7vpBOE3GJ4kJp63W8kWTnfGvkGGxqF0qVOlTYKm_bEw\\\";\\n        urlMap[\\\"SlimeSilvery\\\"] = \\\"ar://rde367iRyDFJgn9-43UfuAKLbNv-EufF7VKfCb-uPUo\\\";\\n        urlMap[\\\"SlimeCopper\\\"] = \\\"ar://gdP5kjV_fc8jC3UB7dunit_vyI0P0ZLWSWElsIs0o98\\\";\\n        urlMap[\\\"BeeGolden\\\"] = \\\"ar://_2PeWFSVKhwrZUvR7h38JkXmvlcB9EM6x1D9aqfFjh8\\\";\\n        urlMap[\\\"BeeSilvery\\\"] = \\\"ar://T8RAlB9mOY2CYh8LxoVP6NBPKlzl-GCkZbfpsb7lkCs\\\";\\n        urlMap[\\\"BeeCopper\\\"] = \\\"ar://zhVYdySVzfjyQkLx0YWcXuLwxLkLJ09Q3OFVurU01eY\\\";\\n        urlMap[\\\"CowGolden\\\"] = \\\"ar://pswhfVTmMh9SB9VXunZ9NrItB3Zqz4ICz-io2cGefbI\\\";\\n        urlMap[\\\"CowSilvery\\\"] = \\\"ar://8qnOSFqMNm_Isi9b9gF4_A_uKuxOR_35r0NsS4LspJw\\\";\\n        urlMap[\\\"CowCopper\\\"] = \\\"ar://EqM8vIUKF-sGiz-ShInXjzcmsToKPPqbyLdggMiAiJc\\\";\\n        urlMap[\\\"CreeperGolden\\\"] = \\\"ar://gThiSTBd8n3NwsLZo6dgbEWHGymE1e-7WNh_O6IsINY\\\";\\n        urlMap[\\\"CreeperSilvery\\\"] = \\\"ar://r0GvIh0Or23Qmjo3lNK9vzdm3414Ct7wGqC9u0tqjhk\\\";\\n        urlMap[\\\"CreeperCopper\\\"] = \\\"ar://yuE5FdjAHNINqnP14ZWFlKdJ3kVQrmXFGCj_ku0nB-4\\\";\\n        urlMap[\\\"DolphinGolden\\\"] = \\\"ar://xQtK4EsopUVdleWc8Gw-8aPGH-zJ9spuyvEuhxNtYN8\\\";\\n        urlMap[\\\"DolphinSilvery\\\"] = \\\"ar://JLhjPuom7wzddo5-qgDlkLXZIuhuJTEJiy85e_kFKz8\\\";\\n        urlMap[\\\"DolphinCopper\\\"] = \\\"ar://D3wwZckyOQ1NLVMzJ3CrXlww4fiS4qXn8HQGuP09qgg\\\";\\n        urlMap[\\\"EnderDragonGolden\\\"] = \\\"ar://C0zfXnXu3jIYe6gbJzr4MCNaLi9ndqGc_DZOKLJebpE\\\";\\n        urlMap[\\\"EnderDragonSilvery\\\"] = \\\"ar://bW_B1qid-blKGSBRvqTFFIZkV1l2obnQ5DQ8SanAacQ\\\";\\n        urlMap[\\\"EnderDragonCopper\\\"] = \\\"ar://lrzrNtuIGa4i28hJY81uWSif-Rt_Ug4LJ3ZLCqn8G90\\\";\\n        urlMap[\\\"EndermanGolden\\\"] = \\\"ar://RVZOfVPgegqYnvCpsI4BDa69XREiZmSlsSm7H_6gU0o\\\";\\n        urlMap[\\\"EndermanSilvery\\\"] = \\\"ar://_KYzopNYjSYcsAFUEovjUYfD8dwnqlwUcoxsWDpQK7g\\\";\\n        urlMap[\\\"EndermanCopper\\\"] = \\\"ar://71eGx6A_RvMcldnFB0nqU2UA3NgvicbJo22DOJJlLYs\\\";\\n        urlMap[\\\"IronGolemGolden\\\"] = \\\"ar://GRKyE3ZvgXjilrdQ5__1NL6RTiqW5-kTwR5kyt4jf68\\\";\\n        urlMap[\\\"IronGolemSilvery\\\"] = \\\"ar://1-_sf-2Xxi00hGxv15k7EbVChDkEp6h9bmFuQCkLsms\\\";\\n        urlMap[\\\"IronGolemCopper\\\"] = \\\"ar://MUs64O0K72jpsq6gqShuKygzlLqOyZiZbmDIUJ0M7hg\\\";\\n        urlMap[\\\"TurtleGolden\\\"] = \\\"ar://4g2MqEi-8b-Lh2F__jtM55dxSKUZpc5IJG2VlFJd7V4\\\";\\n        urlMap[\\\"TurtleSilvery\\\"] = \\\"ar://g4H3kqjAfshjBEoIkX6Ks2ViRtL88aqyfag5Si0JD4I\\\";\\n        urlMap[\\\"TurtleCopper\\\"] = \\\"ar://0PfeXImbImNFWv0J6nYMrnAKZjuQAvZn7HqZe2TNoZ8\\\";\\n        urlMap[\\\"WitherGolden\\\"] = \\\"ar://EMLrsR5vvB6i8mgg71A_RAH-kBA44be-jTeNFIaUmpc\\\";\\n        urlMap[\\\"WitherSilvery\\\"] = \\\"ar://PcSYjwvWQx-JoMUEIPidnwPectQjKg25lrTXI4xULrQ\\\";\\n        urlMap[\\\"WitherCopper\\\"] = \\\"ar://_dIP9gZrnIjeQUqsF7w8dppU0qbXdQyEvIimxg4spsY\\\";\\n        urlMap[\\\"AxolotlGolden\\\"] = \\\"ar://ZVMqJEThT2vs_cYL7CMd4ijLvUqC9Koz2D6sdI1WvGc\\\";\\n        urlMap[\\\"AxolotlSilvery\\\"] = \\\"ar://EubG1GY0nYD3mpAWx69mX_30m3eZKCF6O77cS_beqMU\\\";\\n        urlMap[\\\"AxolotlCopper\\\"] = \\\"ar://UpTJnmJpVtD2oAqcW2mM2UH8WtzLcLNQHw6SWy027hg\\\";\\n        urlMap[\\\"PigGolden\\\"] = \\\"ar://7O2OuLHESc5zjwVTCrBeu7Un9TWUAVNcYNeao3tqJmg\\\";\\n        urlMap[\\\"PigSilvery\\\"] = \\\"ar://MLfajgCbkynn2QCttTYpxrkCD0p4Ve2p0hVYPVqfeCg\\\";\\n        urlMap[\\\"PigCopper\\\"] = \\\"ar://NJKtswIpy8tnARbpPUgai0RNehgjkFfVoVyIsiS-VwU\\\";\\n    }\\n\\n    function isClaimed(uint256 index) public view override returns (bool) {\\n        uint256 claimedWordIndex = index / 256;\\n        uint256 claimedBitIndex = index % 256;\\n        uint256 claimedWord = claimedBitMap[claimedWordIndex];\\n        uint256 mask = (1 << claimedBitIndex);\\n        return claimedWord & mask == mask;\\n    }\\n\\n    function _setClaimed(uint256 index) private {\\n        uint256 claimedWordIndex = index / 256;\\n        uint256 claimedBitIndex = index % 256;\\n        claimedBitMap[claimedWordIndex] = claimedBitMap[claimedWordIndex] | (1 << claimedBitIndex);\\n    }\\n\\n    function claim(uint256 index, address account, uint256 score, string memory creature, bytes32[] calldata merkleProof) external override {\\n        require(!isClaimed(index), 'MerkleDistributor: Drop already claimed.');\\n\\n        // Verify the merkle proof.\\n        bytes32 node = keccak256(abi.encodePacked(index, account, score, creature));\\n        require(MerkleProof.verify(merkleProof, merkleRoot, node), 'MerkleDistributor: Invalid proof.');\\n\\n        // Mark it claimed and send the token.\\n        _setClaimed(index);\\n        _safeMint(account, count);\\n        tokenSummary[count] = Summary({score: score, creature: creature, index: index});\\n        count += 1;\\n        emit Claimed(index, account, score, creature);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        Summary memory summary = tokenSummary[tokenId];\\n        string memory level = scoreLevel(summary.score);\\n        string memory name = string(abi.encodePacked(summary.creature, \\\" \\\", level,  \\\" #\\\", toString(tokenId)));\\n        string memory url = urlMap[string(abi.encodePacked(summary.creature, level))];\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\": \\\"',name, '\\\",',\\n                        '\\\"description\\\": \\\"Metacraft Summary\\\",',\\n                        '\\\"image\\\":\\\"', url, '\\\",',\\n                        '\\\"attributes\\\": [',\\n                        abi.encodePacked(\\n                            '{\\\"trait_type\\\": \\\"Score\\\", \\\"value\\\": \\\"',\\n                            toString(summary.score),\\n                            '\\\"},',\\n                            '{\\\"trait_type\\\": \\\"Creature\\\", \\\"value\\\": \\\"',\\n                            summary.creature,\\n                            '\\\"},',\\n                            '{\\\"trait_type\\\": \\\"Texture\\\", \\\"value\\\": \\\"',\\n                            level,\\n                            '\\\"}'\\n                        ),\\n                        ']}'\\n                    )\\n                )));\\n        return string(abi.encodePacked('data:application/json;base64,', json));\\n    }\\n\\n    function scoreLevel(uint256 score) internal pure returns (string memory) {\\n        if (score >= 2000) {\\n            return \\\"Golden\\\";\\n        }\\n        if (score >= 1000) {\\n            return \\\"Silvery\\\";\\n        }\\n        return \\\"Copper\\\";\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT license\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return '0';\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\",\"keccak256\":\"0x6af4a088c975b92060d235efb11b0f2f3b93c0ea428f9ce98ed2b1c0f9fa1e41\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMerkleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\n// Allows anyone to claim a token if they exist in a merkle root.\\ninterface IMerkleDistributor {\\n    // Returns the merkle root of the merkle tree containing account balances available to claim.\\n    function merkleRoot() external view returns (bytes32);\\n    // Returns true if the index has been marked claimed.\\n    function isClaimed(uint256 index) external view returns (bool);\\n    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid.\\n    function claim(uint256 index, address account, uint256 score, string memory creatue, bytes32[] calldata merkleProof) external;\\n\\n    // This event is triggered whenever a call to #claim succeeds.\\n    event Claimed(uint256 index, address account, uint256 score, string creature);\\n}\",\"keccak256\":\"0xfd7180eecdf2a5c4de5b62089bbb8b9595587ddcf790ced32b5eea6b18b511b0\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a060405260006007553480156200001657600080fd5b5060405162003e0338038062003e03833981016040819052620000399162000cce565b604080518082018252601a81527f4d657461637261667420736561736f6e2070617373203230323200000000000060208083019182528351808501909452600684526526a19918191960d11b9084015281519192916200009c9160009162000c28565b508051620000b290600190602084019062000c28565b505050620000cf620000c962000bd260201b60201c565b62000bd6565b60808190526040805160608101909152603080825262003c8360208301396009604051620000fd9062000d32565b908152602001604051809103902090805190602001906200012092919062000c28565b5060405180606001604052806030815260200162003b636030913960096040516200014b9062000dae565b908152602001604051809103902090805190602001906200016e92919062000c28565b5060405180606001604052806030815260200162003b93603091396009604051620001999062000d64565b90815260200160405180910390209080519060200190620001bc92919062000c28565b5060405180606001604052806030815260200162003893603091396009604051620001e79062000f26565b908152602001604051809103902090805190602001906200020a92919062000c28565b5060405180606001604052806030815260200162003ad3603091396009604051620002359062001013565b908152602001604051809103902090805190602001906200025892919062000c28565b50604051806060016040528060308152602001620039b3603091396009604051620002839062000f3b565b90815260200160405180910390209080519060200190620002a692919062000c28565b5060405180606001604052806030815260200162003bc3603091396009604051620002d19062000dc6565b90815260200160405180910390209080519060200190620002f492919062000c28565b5060405180606001604052806030815260200162003c236030913960096040516200031f9062000fb0565b908152602001604051809103902090805190602001906200034292919062000c28565b50604051806060016040528060308152602001620037a36030913960096040516200036d9062000d1d565b908152602001604051809103902090805190602001906200039092919062000c28565b5060405180606001604052806030815260200162003803603091396009604051620003bb9062000ef4565b90815260200160405180910390209080519060200190620003de92919062000c28565b5060405180606001604052806030815260200162003b33603091396009604051620004099062000f50565b908152602001604051809103902090805190602001906200042c92919062000c28565b5060405180606001604052806030815260200162003ce3603091396009604051620004579062000e92565b908152602001604051809103902090805190602001906200047a92919062000c28565b5060405180606001604052806030815260200162003863603091396009604051620004a59062000e47565b90815260200160405180910390209080519060200190620004c892919062000c28565b50604051806060016040528060308152602001620038f3603091396009604051620004f39062000ff9565b908152602001604051809103902090805190602001906200051692919062000c28565b50604051806060016040528060308152602001620037d3603091396009604051620005419062000ec0565b908152602001604051809103902090805190602001906200056492919062000c28565b5060405180606001604052806030815260200162003da36030913960096040516200058f9062000df5565b90815260200160405180910390209080519060200190620005b292919062000c28565b5060405180606001604052806030815260200162003953603091396009604051620005dd9062000cff565b908152602001604051809103902090805190602001906200060092919062000c28565b5060405180606001604052806030815260200162003d136030913960096040516200062b9062000e2a565b908152602001604051809103902090805190602001906200064e92919062000c28565b5060405180606001604052806030815260200162003a73603091396009604051620006799062000fc6565b908152602001604051809103902090805190602001906200069c92919062000c28565b5060405180606001604052806030815260200162003a13603091396009604051620006c79062000d49565b90815260200160405180910390209080519060200190620006ea92919062000c28565b5060405180606001604052806030815260200162003773603091396009604051620007159062000ddb565b908152602001604051809103902090805190602001906200073892919062000c28565b5060405180606001604052806030815260200162003bf3603091396009604051620007639062000d93565b908152602001604051809103902090805190602001906200078692919062000c28565b5060405180606001604052806030815260200162003983603091396009604051620007b19062000e60565b90815260200160405180910390209080519060200190620007d492919062000c28565b5060405180606001604052806030815260200162003aa3603091396009604051620007ff9062000ed9565b908152602001604051809103902090805190602001906200082292919062000c28565b50604051806060016040528060308152602001620038336030913960096040516200084d9062000ce7565b908152602001604051809103902090805190602001906200087092919062000c28565b5060405180606001604052806030815260200162003c536030913960096040516200089b9062000f97565b90815260200160405180910390209080519060200190620008be92919062000c28565b5060405180606001604052806030815260200162003b03603091396009604051620008e99062000e12565b908152602001604051809103902090805190602001906200090c92919062000c28565b5060405180606001604052806030815260200162003dd3603091396009604051620009379062000d7b565b908152602001604051809103902090805190602001906200095a92919062000c28565b5060405180606001604052806030815260200162003cb3603091396009604051620009859062000fe0565b90815260200160405180910390209080519060200190620009a892919062000c28565b50604051806060016040528060308152602001620038c3603091396009604051620009d39062000f6a565b90815260200160405180910390209080519060200190620009f692919062000c28565b5060405180606001604052806030815260200162003d4360309139600960405162000a219062000f0d565b9081526020016040518091039020908051906020019062000a4492919062000c28565b5060405180606001604052806030815260200162003a4360309139600960405162000a6f9062001042565b9081526020016040518091039020908051906020019062000a9292919062000c28565b50604051806060016040528060308152602001620039e360309139600960405162000abd9062001029565b9081526020016040518091039020908051906020019062000ae092919062000c28565b5060405180606001604052806030815260200162003d7360309139600960405162000b0b9062000f82565b9081526020016040518091039020908051906020019062000b2e92919062000c28565b506040518060600160405280603081526020016200392360309139600960405162000b599062000e7c565b9081526020016040518091039020908051906020019062000b7c92919062000c28565b506040518060600160405280603081526020016200374360309139600960405162000ba79062000eab565b9081526020016040518091039020908051906020019062000bca92919062000c28565b505062001099565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b82805462000c36906200105c565b90600052602060002090601f01602090048101928262000c5a576000855562000ca5565b82601f1062000c7557805160ff191683800117855562000ca5565b8280016001018555821562000ca5579182015b8281111562000ca557825182559160200191906001019062000c88565b5062000cb392915062000cb7565b5090565b5b8082111562000cb3576000815560010162000cb8565b60006020828403121562000ce0578081fd5b5051919050565b6b2a3ab93a3632a3b7b63232b760a11b8152600c0190565b71456e646572447261676f6e53696c7665727960701b815260120190565b6821b7bba1b7b83832b960b91b815260090190565b6a29b634b6b2a3b7b63232b760a91b8152600b0190565b6e456e6465726d616e53696c7665727960881b8152600f0190565b6a29b634b6b2a1b7b83832b960a91b8152600b0190565b6b2bb4ba3432b923b7b63232b760a11b8152600c0190565b6e24b937b723b7b632b6a3b7b63232b760891b8152600f0190565b6b536c696d6553696c7665727960a01b8152600c0190565b6821b7bba3b7b63232b760b91b815260090190565b6d22b73232b936b0b721b7b83832b960911b8152600e0190565b7022b73232b9223930b3b7b723b7b63232b760791b815260110190565b6b2a3ab93a3632a1b7b83832b960a11b8152600c0190565b7022b73232b9223930b3b7b721b7b83832b960791b815260110190565b6c2237b6383434b723b7b63232b760991b8152600d0190565b6f49726f6e476f6c656d53696c7665727960801b815260100190565b6950696753696c7665727960b01b8152600a0190565b6c21b932b2b832b921b7b83832b960991b8152600d0190565b682834b3a1b7b83832b960b91b815260090190565b6c2237b6383434b721b7b83832b960991b8152600d0190565b6e24b937b723b7b632b6a1b7b83832b960891b8152600f0190565b6c21b932b2b832b923b7b63232b760991b8152600d0190565b6c20bc37b637ba3623b7b63232b760991b8152600d0190565b682132b2a3b7b63232b760b91b815260090190565b682132b2a1b7b83832b960b91b815260090190565b6d4372656570657253696c7665727960901b8152600e0190565b6b2bb4ba3432b921b7b83832b960a11b8152600c0190565b682834b3a3b7b63232b760b91b815260090190565b6c547572746c6553696c7665727960981b8152600d0190565b69436f7753696c7665727960b01b8152600a0190565b6d22b73232b936b0b723b7b63232b760911b8152600e0190565b6c57697468657253696c7665727960981b8152600d0190565b6d446f6c7068696e53696c7665727960901b8152600e0190565b6942656553696c7665727960b01b8152600a0190565b6c20bc37b637ba3621b7b83832b960991b8152600d0190565b6d41786f6c6f746c53696c7665727960901b8152600e0190565b6002810460018216806200107157607f821691505b602082108114156200109357634e487b7160e01b600052602260045260246000fd5b50919050565b608051612687620010bc6000396000818161051a0152610a6201526126876000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c8063715018a6116100cd578063b88d4fde11610081578063e985e9c511610066578063e985e9c5146102b1578063f2fde38b146102c4578063f6bf2a59146102d75761016c565b8063b88d4fde1461028b578063c87b56dd1461029e5761016c565b806395d89b41116100b257806395d89b411461025d5780639e34070f14610265578063a22cb465146102785761016c565b8063715018a61461024d5780638da5cb5b146102555761016c565b806323b872dd1161012457806342842e0e1161010957806342842e0e146102145780636352211e1461022757806370a082311461023a5761016c565b806323b872dd146101f95780632eb4a7ab1461020c5761016c565b806306fdde031161015557806306fdde03146101af578063081812fc146101c4578063095ea7b3146101e45761016c565b806301ffc9a71461017157806306661abd1461019a575b600080fd5b61018461017f3660046118f7565b6102ea565b6040516101919190611efd565b60405180910390f35b6101a2610364565b6040516101919190611f08565b6101b761036a565b6040516101919190611f11565b6101d76101d236600461192f565b6103fc565b6040516101919190611ead565b6101f76101f23660046118ce565b610448565b005b6101f76102073660046117e0565b6104e0565b6101a2610518565b6101f76102223660046117e0565b61053c565b6101d761023536600461192f565b610557565b6101a261024836600461178d565b61058c565b6101f76105d0565b6101d761061b565b6101b761062a565b61018461027336600461192f565b610639565b6101f7610286366004611894565b61067a565b6101f761029936600461181b565b610690565b6101b76102ac36600461192f565b6106cf565b6101846102bf3660046117ae565b610937565b6101f76102d236600461178d565b610965565b6101f76102e5366004611947565b6109d6565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061034d57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061035c575061035c82610b71565b90505b919050565b60075481565b6060600080546103799061254f565b80601f01602080910402602001604051908101604052809291908181526020018280546103a59061254f565b80156103f25780601f106103c7576101008083540402835291602001916103f2565b820191906000526020600020905b8154815290600101906020018083116103d557829003601f168201915b5050505050905090565b600061040782610ba3565b61042c5760405162461bcd60e51b8152600401610423906122fb565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061045382610557565b9050806001600160a01b0316836001600160a01b031614156104875760405162461bcd60e51b8152600401610423906123d9565b806001600160a01b0316610499610bc0565b6001600160a01b031614806104b557506104b5816102bf610bc0565b6104d15760405162461bcd60e51b8152600401610423906121af565b6104db8383610bc4565b505050565b6104f16104eb610bc0565b82610c3f565b61050d5760405162461bcd60e51b815260040161042390612436565b6104db838383610cc4565b7f000000000000000000000000000000000000000000000000000000000000000081565b6104db83838360405180602001604052806000815250610690565b6000818152600260205260408120546001600160a01b03168061035c5760405162461bcd60e51b815260040161042390612269565b60006001600160a01b0382166105b45760405162461bcd60e51b81526004016104239061220c565b506001600160a01b031660009081526003602052604090205490565b6105d8610bc0565b6001600160a01b03166105e961061b565b6001600160a01b03161461060f5760405162461bcd60e51b815260040161042390612347565b6106196000610dfe565b565b6006546001600160a01b031690565b6060600180546103799061254f565b600080610648610100846124d9565b90506000610658610100856125a5565b60009283526008602052604090922054600190921b9182169091149392505050565b61068c610685610bc0565b8383610e5d565b5050565b6106a161069b610bc0565b83610c3f565b6106bd5760405162461bcd60e51b815260040161042390612436565b6106c984848484610f00565b50505050565b60606000600a60008481526020019081526020016000206040518060600160405290816000820154815260200160018201805461070b9061254f565b80601f01602080910402602001604051908101604052809291908181526020018280546107379061254f565b80156107845780601f1061075957610100808354040283529160200191610784565b820191906000526020600020905b81548152906001019060200180831161076757829003601f168201915b50505050508152602001600282015481525050905060006107a88260000151610f33565b905060008260200151826107bb87610ff4565b6040516020016107cd93929190611ac1565b6040516020818303038152906040529050600060098460200151846040516020016107f9929190611a92565b60408051601f198184030181529082905261081391611a76565b9081526020016040518091039020805461082c9061254f565b80601f01602080910402602001604051908101604052809291908181526020018280546108589061254f565b80156108a55780601f1061087a576101008083540402835291602001916108a5565b820191906000526020600020905b81548152906001019060200180831161088857829003601f168201915b50505050509050600061090983836108c08860000151610ff4565b6020808a01516040516108d693928b9101611cb9565b60408051601f19818403018152908290526108f5939291602001611b58565b604051602081830303815290604052611143565b90508060405160200161091c9190611e22565b60405160208183030381529060405295505050505050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61096d610bc0565b6001600160a01b031661097e61061b565b6001600160a01b0316146109a45760405162461bcd60e51b815260040161042390612347565b6001600160a01b0381166109ca5760405162461bcd60e51b815260040161042390611f81565b6109d381610dfe565b50565b6109df86610639565b156109fc5760405162461bcd60e51b815260040161042390612015565b600086868686604051602001610a159493929190611e67565b604051602081830303815290604052805190602001209050610a8d8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f000000000000000000000000000000000000000000000000000000000000000092508591506112ee9050565b610aa95760405162461bcd60e51b815260040161042390612152565b610ab287611304565b610abe86600754611342565b6040805160608101825286815260208082018781528284018b90526007546000908152600a8352939093208251815592518051929392610b04926001850192019061166d565b5060408201518160020155905050600160076000828254610b2591906124c1565b90915550506040517fee563d8e532abc293fca2fdeb41c25180305bddcf9206c167dab3e155aaf171390610b60908990899089908990612493565b60405180910390a150505050505050565b6001600160e01b031981167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b6000908152600260205260409020546001600160a01b0316151590565b3390565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190610c0682610557565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610c4a82610ba3565b610c665760405162461bcd60e51b815260040161042390612106565b6000610c7183610557565b9050806001600160a01b0316846001600160a01b03161480610cac5750836001600160a01b0316610ca1846103fc565b6001600160a01b0316145b80610cbc5750610cbc8185610937565b949350505050565b826001600160a01b0316610cd782610557565b6001600160a01b031614610cfd5760405162461bcd60e51b81526004016104239061237c565b6001600160a01b038216610d235760405162461bcd60e51b815260040161042390612072565b610d2e8383836104db565b610d39600082610bc4565b6001600160a01b0383166000908152600360205260408120805460019290610d6290849061250c565b90915550506001600160a01b0382166000908152600360205260408120805460019290610d909084906124c1565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600680546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415610e8f5760405162461bcd60e51b8152600401610423906120cf565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190610ef3908590611efd565b60405180910390a3505050565b610f0b848484610cc4565b610f178484848461135c565b6106c95760405162461bcd60e51b815260040161042390611f24565b60606107d08210610f78575060408051808201909152600681527f476f6c64656e0000000000000000000000000000000000000000000000000000602082015261035f565b6103e88210610fbb575060408051808201909152600781527f53696c7665727900000000000000000000000000000000000000000000000000602082015261035f565b505060408051808201909152600681527f436f707065720000000000000000000000000000000000000000000000000000602082015290565b606081611035575060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015261035f565b8160005b811561105f57806110498161258a565b91506110589050600a836124d9565b9150611039565b60008167ffffffffffffffff81111561108857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156110b2576020820181803683370190505b5090505b8415610cbc576110c760018361250c565b91506110d4600a866125a5565b6110df9060306124c1565b60f81b81838151811061110257634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061113c600a866124d9565b94506110b6565b80516060908061116357505060408051602081019091526000815261035f565b600060036111728360026124c1565b61117c91906124d9565b6111879060046124ed565b905060006111968260206124c1565b67ffffffffffffffff8111156111bc57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156111e6576020820181803683370190505b5090506000604051806060016040528060408152602001612612604091399050600181016020830160005b86811015611272576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101611211565b50600386066001811461128c57600281146112b8576112e0565b7f3d3d0000000000000000000000000000000000000000000000000000000000006001198301526112e0565b7f3d000000000000000000000000000000000000000000000000000000000000006000198301525b505050918152949350505050565b6000826112fb8584611490565b14949350505050565b6000611312610100836124d9565b90506000611322610100846125a5565b6000928352600860205260409092208054600190931b9092179091555050565b61068c828260405180602001604052806000815250611548565b6000611370846001600160a01b031661157b565b1561148557836001600160a01b031663150b7a0261138c610bc0565b8786866040518563ffffffff1660e01b81526004016113ae9493929190611ec1565b602060405180830381600087803b1580156113c857600080fd5b505af19250505080156113f8575060408051601f3d908101601f191682019092526113f591810190611913565b60015b611452573d808015611426576040519150601f19603f3d011682016040523d82523d6000602084013e61142b565b606091505b50805161144a5760405162461bcd60e51b815260040161042390611f24565b805181602001fd5b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149050610cbc565b506001949350505050565b600081815b84518110156115405760008582815181106114c057634e487b7160e01b600052603260045260246000fd5b602002602001015190508083116115015782816040516020016114e4929190611a68565b60405160208183030381529060405280519060200120925061152d565b8083604051602001611514929190611a68565b6040516020818303038152906040528051906020012092505b50806115388161258a565b915050611495565b509392505050565b6115528383611581565b61155f600084848461135c565b6104db5760405162461bcd60e51b815260040161042390611f24565b3b151590565b6001600160a01b0382166115a75760405162461bcd60e51b8152600401610423906122c6565b6115b081610ba3565b156115cd5760405162461bcd60e51b815260040161042390611fde565b6115d9600083836104db565b6001600160a01b03821660009081526003602052604081208054600192906116029084906124c1565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8280546116799061254f565b90600052602060002090601f01602090048101928261169b57600085556116e1565b82601f106116b457805160ff19168380011785556116e1565b828001600101855582156116e1579182015b828111156116e15782518255916020019190600101906116c6565b506116ed9291506116f1565b5090565b5b808211156116ed57600081556001016116f2565b600067ffffffffffffffff80841115611721576117216125e5565b604051601f8501601f191681016020018281118282101715611745576117456125e5565b60405284815291508183850186101561175d57600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b038116811461035f57600080fd5b60006020828403121561179e578081fd5b6117a782611776565b9392505050565b600080604083850312156117c0578081fd5b6117c983611776565b91506117d760208401611776565b90509250929050565b6000806000606084860312156117f4578081fd5b6117fd84611776565b925061180b60208501611776565b9150604084013590509250925092565b60008060008060808587031215611830578081fd5b61183985611776565b935061184760208601611776565b925060408501359150606085013567ffffffffffffffff811115611869578182fd5b8501601f81018713611879578182fd5b61188887823560208401611706565b91505092959194509250565b600080604083850312156118a6578182fd5b6118af83611776565b9150602083013580151581146118c3578182fd5b809150509250929050565b600080604083850312156118e0578182fd5b6118e983611776565b946020939093013593505050565b600060208284031215611908578081fd5b81356117a7816125fb565b600060208284031215611924578081fd5b81516117a7816125fb565b600060208284031215611940578081fd5b5035919050565b60008060008060008060a0878903121561195f578182fd5b8635955061196f60208801611776565b945060408701359350606087013567ffffffffffffffff80821115611992578384fd5b818901915089601f8301126119a5578384fd5b6119b48a833560208501611706565b945060808901359150808211156119c9578384fd5b818901915089601f8301126119dc578384fd5b8135818111156119ea578485fd5b8a602080830285010111156119fd578485fd5b6020830194508093505050509295509295509295565b60008151808452611a2b816020860160208601612523565b601f01601f19169290920160200192915050565b7f227d000000000000000000000000000000000000000000000000000000000000815260020190565b918252602082015260400190565b60008251611a88818460208701612523565b9190910192915050565b60008351611aa4818460208801612523565b835190830190611ab8818360208801612523565b01949350505050565b60008451611ad3818460208901612523565b7f20000000000000000000000000000000000000000000000000000000000000009083019081528451611b0d816001840160208901612523565b7f2023000000000000000000000000000000000000000000000000000000000000600192909101918201528351611b4b816003840160208801612523565b0160030195945050505050565b60007f7b226e616d65223a20220000000000000000000000000000000000000000000082528451611b9081600a850160208901612523565b80830190507f222c00000000000000000000000000000000000000000000000000000000000080600a8301527f226465736372697074696f6e223a20224d65746163726166742053756d6d6172600c8301527f79222c0000000000000000000000000000000000000000000000000000000000602c8301527f22696d616765223a220000000000000000000000000000000000000000000000602f8301528551611c41816038850160208a01612523565b60389201918201527f2261747472696275746573223a205b0000000000000000000000000000000000603a8201528351611c82816049840160208801612523565b7f5d7d00000000000000000000000000000000000000000000000000000000000060499290910191820152604b0195945050505050565b60007f7b2274726169745f74797065223a202253636f7265222c202276616c7565223a82527f202200000000000000000000000000000000000000000000000000000000000060208301528451611d17816022850160208901612523565b80830190507f227d2c00000000000000000000000000000000000000000000000000000000008060228301527f7b2274726169745f74797065223a20224372656174757265222c202276616c7560258301527f65223a202200000000000000000000000000000000000000000000000000000060458301528551611da281604a850160208a01612523565b604a9201918201527f7b2274726169745f74797065223a202254657874757265222c202276616c7565604d8201527f223a202200000000000000000000000000000000000000000000000000000000606d8201528351611e09816071840160208801612523565b611e17607182840101611a3f565b979650505050505050565b60007f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000082528251611e5a81601d850160208701612523565b91909101601d0192915050565b60008582526bffffffffffffffffffffffff198560601b1660208301528360348301528251611e9d816054850160208701612523565b9190910160540195945050505050565b6001600160a01b0391909116815260200190565b60006001600160a01b03808716835280861660208401525083604083015260806060830152611ef36080830184611a13565b9695505050505050565b901515815260200190565b90815260200190565b6000602082526117a76020830184611a13565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527f63656976657220696d706c656d656e7465720000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526028908201527f4d65726b6c654469737472696275746f723a2044726f7020616c72656164792060408201527f636c61696d65642e000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526021908201527f4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f6660408201527f2e00000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560408201527f726f206164647265737300000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201527f656e7420746f6b656e0000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201527f73206e6f74206f776e0000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560408201527f7200000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60408201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606082015260800190565b60008582526001600160a01b038516602083015283604083015260806060830152611ef36080830184611a13565b600082198211156124d4576124d46125b9565b500190565b6000826124e8576124e86125cf565b500490565b6000816000190483118215151615612507576125076125b9565b500290565b60008282101561251e5761251e6125b9565b500390565b60005b8381101561253e578181015183820152602001612526565b838111156106c95750506000910152565b60028104600182168061256357607f821691505b6020821081141561258457634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561259e5761259e6125b9565b5060010190565b6000826125b4576125b46125cf565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146109d357600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212204dace5b2ce8d27ae4305ef9adb7e2014a612f08beae3de592932dc005a8005bb64736f6c6343000800003361723a2f2f4e4a4b74737749707938746e41526270505567616930524e6568676a6b4666566f5679497369532d56775561723a2f2f373165477836415f52764d636c646e4642306e7155325541334e67766963624a6f3232444f4a4a6c4c597361723a2f2f45714d387649554b462d7347697a2d5368496e586a7a636d73546f4b50507162794c6467674d6941694a6361723a2f2f443377775a636b794f51314e4c564d7a4a334372586c7777346669533471586e384851477550303971676761723a2f2f6754686953544264386e334e77734c5a6f3664676245574847796d4531652d37574e685f4f364973494e5961723a2f2f3467324d7145692d38622d4c6832465f5f6a744d35356478534b555a706335494a4732566c464a6437563461723a2f2f7851744b3445736f705556646c6557633847772d38615047482d7a4a397370757976457568784e74594e3861723a2f2f5f325065574653564b6877725a557652376833384a6b586d766c634239454d3678314439617166466a683861723a2f2f5f64495039675a726e496a6551557173463777386470705530716258645179457649696d7867347370735961723a2f2f4a4c686a50756f6d37777a64646f352d7167446c6b4c585a497568754a54454a69793835655f6b464b7a3861723a2f2f4d4c66616a6743626b796e6e325143747454597078726b434430703456653270306856595056716665436761723a2f2f62575f42317169642d626c4b475342527671544646495a6b56316c326f626e513544513853616e4161635161723a2f2f312d5f73662d3258786930306847787631356b374562564368446b4570366839626d467551436b4c736d7361723a2f2f7a685659647953567a666a79516b4c783059576358754c77784c6b4c4a303951334f46567572553031655961723a2f2f5570544a6e6d4a70567444326f41716357326d4d3255483857747a4c634c4e51487736535779303237686761723a2f2f5f4b597a6f704e596a53596373414655456f766a555966443864776e716c7755636f7873574470514b376761723a2f2f45756247314759306e5944336d7041577836396d585f33306d33655a4b4346364f373763535f6265714d5561723a2f2f52565a4f66565067656771596e7643707349344244613639585245695a6d536c73536d37485f366755306f61723a2f2f4d557336344f304b37326a7073713667715368754b79677a6c4c714f795a695a626d4449554a304d37686761723a2f2f543852416c42396d4f5932435968384c786f5650364e42504b6c7a6c2d47436b5a6266707362376c6b437361723a2f2f3050666558496d62496d4e465776304a366e594d726e414b5a6a755141765a6e3748715a6532544e6f5a3861723a2f2f723047764968304f723233516d6a6f336c4e4b39767a646d333431344374377747714339753074716a686b61723a2f2f72646533363769527944464a676e392d3433556675414b4c624e762d4575664637564b6643622d7550556f61723a2f2f676450356b6a565f6663386a433355423764756e69745f7679493050305a4c575357456c734973306f393861723a2f2f707377686656546d4d68395342395658756e5a394e72497442335a717a3449437a2d696f3263476566624961723a2f2f47524b7945335a7667586a696c726451355f5f314e4c365254697157352d6b547752356b7974346a66363861723a2f2f38716e4f5346714d4e6d5f4973693962396746345f415f754b75784f525f333572304e7353344c73704a7761723a2f2f673448336b716a416673686a42456f496b58364b7332566952744c3838617179666167355369304a44344961723a2f2f377670424f4533474a346b4a70363357386b57546e6647766b47477871463071564f6c54594b6d5f62457761723a2f2f506353596a77765751782d4a6f4d5545495069646e7750656374516a4b6732356c725458493478554c725161723a2f2f7975453546646a41484e494e716e5031345a57466c4b644a336b5651726d584647436a5f6b75306e422d3461723a2f2f6c727a724e747549476134693238684a59383175575369662d52745f5567344c4a335a4c43716e3847393061723a2f2f5a564d714a455468543276735f63594c37434d6434696a4c76557143394b6f7a324436736449315776476361723a2f2f374f324f754c48455363357a6a775654437242657537556e3954575541564e63594e65616f3374714a6d6761723a2f2f43307a66586e5875336a4959653667624a7a72344d434e614c69396e647147635f445a4f4b4c4a6562704561723a2f2f454d4c727352357676423669386d67673731415f5241482d6b4241343462652d6a54654e464961556d7063",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c8063715018a6116100cd578063b88d4fde11610081578063e985e9c511610066578063e985e9c5146102b1578063f2fde38b146102c4578063f6bf2a59146102d75761016c565b8063b88d4fde1461028b578063c87b56dd1461029e5761016c565b806395d89b41116100b257806395d89b411461025d5780639e34070f14610265578063a22cb465146102785761016c565b8063715018a61461024d5780638da5cb5b146102555761016c565b806323b872dd1161012457806342842e0e1161010957806342842e0e146102145780636352211e1461022757806370a082311461023a5761016c565b806323b872dd146101f95780632eb4a7ab1461020c5761016c565b806306fdde031161015557806306fdde03146101af578063081812fc146101c4578063095ea7b3146101e45761016c565b806301ffc9a71461017157806306661abd1461019a575b600080fd5b61018461017f3660046118f7565b6102ea565b6040516101919190611efd565b60405180910390f35b6101a2610364565b6040516101919190611f08565b6101b761036a565b6040516101919190611f11565b6101d76101d236600461192f565b6103fc565b6040516101919190611ead565b6101f76101f23660046118ce565b610448565b005b6101f76102073660046117e0565b6104e0565b6101a2610518565b6101f76102223660046117e0565b61053c565b6101d761023536600461192f565b610557565b6101a261024836600461178d565b61058c565b6101f76105d0565b6101d761061b565b6101b761062a565b61018461027336600461192f565b610639565b6101f7610286366004611894565b61067a565b6101f761029936600461181b565b610690565b6101b76102ac36600461192f565b6106cf565b6101846102bf3660046117ae565b610937565b6101f76102d236600461178d565b610965565b6101f76102e5366004611947565b6109d6565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061034d57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061035c575061035c82610b71565b90505b919050565b60075481565b6060600080546103799061254f565b80601f01602080910402602001604051908101604052809291908181526020018280546103a59061254f565b80156103f25780601f106103c7576101008083540402835291602001916103f2565b820191906000526020600020905b8154815290600101906020018083116103d557829003601f168201915b5050505050905090565b600061040782610ba3565b61042c5760405162461bcd60e51b8152600401610423906122fb565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061045382610557565b9050806001600160a01b0316836001600160a01b031614156104875760405162461bcd60e51b8152600401610423906123d9565b806001600160a01b0316610499610bc0565b6001600160a01b031614806104b557506104b5816102bf610bc0565b6104d15760405162461bcd60e51b8152600401610423906121af565b6104db8383610bc4565b505050565b6104f16104eb610bc0565b82610c3f565b61050d5760405162461bcd60e51b815260040161042390612436565b6104db838383610cc4565b7f000000000000000000000000000000000000000000000000000000000000000081565b6104db83838360405180602001604052806000815250610690565b6000818152600260205260408120546001600160a01b03168061035c5760405162461bcd60e51b815260040161042390612269565b60006001600160a01b0382166105b45760405162461bcd60e51b81526004016104239061220c565b506001600160a01b031660009081526003602052604090205490565b6105d8610bc0565b6001600160a01b03166105e961061b565b6001600160a01b03161461060f5760405162461bcd60e51b815260040161042390612347565b6106196000610dfe565b565b6006546001600160a01b031690565b6060600180546103799061254f565b600080610648610100846124d9565b90506000610658610100856125a5565b60009283526008602052604090922054600190921b9182169091149392505050565b61068c610685610bc0565b8383610e5d565b5050565b6106a161069b610bc0565b83610c3f565b6106bd5760405162461bcd60e51b815260040161042390612436565b6106c984848484610f00565b50505050565b60606000600a60008481526020019081526020016000206040518060600160405290816000820154815260200160018201805461070b9061254f565b80601f01602080910402602001604051908101604052809291908181526020018280546107379061254f565b80156107845780601f1061075957610100808354040283529160200191610784565b820191906000526020600020905b81548152906001019060200180831161076757829003601f168201915b50505050508152602001600282015481525050905060006107a88260000151610f33565b905060008260200151826107bb87610ff4565b6040516020016107cd93929190611ac1565b6040516020818303038152906040529050600060098460200151846040516020016107f9929190611a92565b60408051601f198184030181529082905261081391611a76565b9081526020016040518091039020805461082c9061254f565b80601f01602080910402602001604051908101604052809291908181526020018280546108589061254f565b80156108a55780601f1061087a576101008083540402835291602001916108a5565b820191906000526020600020905b81548152906001019060200180831161088857829003601f168201915b50505050509050600061090983836108c08860000151610ff4565b6020808a01516040516108d693928b9101611cb9565b60408051601f19818403018152908290526108f5939291602001611b58565b604051602081830303815290604052611143565b90508060405160200161091c9190611e22565b60405160208183030381529060405295505050505050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61096d610bc0565b6001600160a01b031661097e61061b565b6001600160a01b0316146109a45760405162461bcd60e51b815260040161042390612347565b6001600160a01b0381166109ca5760405162461bcd60e51b815260040161042390611f81565b6109d381610dfe565b50565b6109df86610639565b156109fc5760405162461bcd60e51b815260040161042390612015565b600086868686604051602001610a159493929190611e67565b604051602081830303815290604052805190602001209050610a8d8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f000000000000000000000000000000000000000000000000000000000000000092508591506112ee9050565b610aa95760405162461bcd60e51b815260040161042390612152565b610ab287611304565b610abe86600754611342565b6040805160608101825286815260208082018781528284018b90526007546000908152600a8352939093208251815592518051929392610b04926001850192019061166d565b5060408201518160020155905050600160076000828254610b2591906124c1565b90915550506040517fee563d8e532abc293fca2fdeb41c25180305bddcf9206c167dab3e155aaf171390610b60908990899089908990612493565b60405180910390a150505050505050565b6001600160e01b031981167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b6000908152600260205260409020546001600160a01b0316151590565b3390565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190610c0682610557565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610c4a82610ba3565b610c665760405162461bcd60e51b815260040161042390612106565b6000610c7183610557565b9050806001600160a01b0316846001600160a01b03161480610cac5750836001600160a01b0316610ca1846103fc565b6001600160a01b0316145b80610cbc5750610cbc8185610937565b949350505050565b826001600160a01b0316610cd782610557565b6001600160a01b031614610cfd5760405162461bcd60e51b81526004016104239061237c565b6001600160a01b038216610d235760405162461bcd60e51b815260040161042390612072565b610d2e8383836104db565b610d39600082610bc4565b6001600160a01b0383166000908152600360205260408120805460019290610d6290849061250c565b90915550506001600160a01b0382166000908152600360205260408120805460019290610d909084906124c1565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600680546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415610e8f5760405162461bcd60e51b8152600401610423906120cf565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190610ef3908590611efd565b60405180910390a3505050565b610f0b848484610cc4565b610f178484848461135c565b6106c95760405162461bcd60e51b815260040161042390611f24565b60606107d08210610f78575060408051808201909152600681527f476f6c64656e0000000000000000000000000000000000000000000000000000602082015261035f565b6103e88210610fbb575060408051808201909152600781527f53696c7665727900000000000000000000000000000000000000000000000000602082015261035f565b505060408051808201909152600681527f436f707065720000000000000000000000000000000000000000000000000000602082015290565b606081611035575060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015261035f565b8160005b811561105f57806110498161258a565b91506110589050600a836124d9565b9150611039565b60008167ffffffffffffffff81111561108857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156110b2576020820181803683370190505b5090505b8415610cbc576110c760018361250c565b91506110d4600a866125a5565b6110df9060306124c1565b60f81b81838151811061110257634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061113c600a866124d9565b94506110b6565b80516060908061116357505060408051602081019091526000815261035f565b600060036111728360026124c1565b61117c91906124d9565b6111879060046124ed565b905060006111968260206124c1565b67ffffffffffffffff8111156111bc57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156111e6576020820181803683370190505b5090506000604051806060016040528060408152602001612612604091399050600181016020830160005b86811015611272576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101611211565b50600386066001811461128c57600281146112b8576112e0565b7f3d3d0000000000000000000000000000000000000000000000000000000000006001198301526112e0565b7f3d000000000000000000000000000000000000000000000000000000000000006000198301525b505050918152949350505050565b6000826112fb8584611490565b14949350505050565b6000611312610100836124d9565b90506000611322610100846125a5565b6000928352600860205260409092208054600190931b9092179091555050565b61068c828260405180602001604052806000815250611548565b6000611370846001600160a01b031661157b565b1561148557836001600160a01b031663150b7a0261138c610bc0565b8786866040518563ffffffff1660e01b81526004016113ae9493929190611ec1565b602060405180830381600087803b1580156113c857600080fd5b505af19250505080156113f8575060408051601f3d908101601f191682019092526113f591810190611913565b60015b611452573d808015611426576040519150601f19603f3d011682016040523d82523d6000602084013e61142b565b606091505b50805161144a5760405162461bcd60e51b815260040161042390611f24565b805181602001fd5b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149050610cbc565b506001949350505050565b600081815b84518110156115405760008582815181106114c057634e487b7160e01b600052603260045260246000fd5b602002602001015190508083116115015782816040516020016114e4929190611a68565b60405160208183030381529060405280519060200120925061152d565b8083604051602001611514929190611a68565b6040516020818303038152906040528051906020012092505b50806115388161258a565b915050611495565b509392505050565b6115528383611581565b61155f600084848461135c565b6104db5760405162461bcd60e51b815260040161042390611f24565b3b151590565b6001600160a01b0382166115a75760405162461bcd60e51b8152600401610423906122c6565b6115b081610ba3565b156115cd5760405162461bcd60e51b815260040161042390611fde565b6115d9600083836104db565b6001600160a01b03821660009081526003602052604081208054600192906116029084906124c1565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8280546116799061254f565b90600052602060002090601f01602090048101928261169b57600085556116e1565b82601f106116b457805160ff19168380011785556116e1565b828001600101855582156116e1579182015b828111156116e15782518255916020019190600101906116c6565b506116ed9291506116f1565b5090565b5b808211156116ed57600081556001016116f2565b600067ffffffffffffffff80841115611721576117216125e5565b604051601f8501601f191681016020018281118282101715611745576117456125e5565b60405284815291508183850186101561175d57600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b038116811461035f57600080fd5b60006020828403121561179e578081fd5b6117a782611776565b9392505050565b600080604083850312156117c0578081fd5b6117c983611776565b91506117d760208401611776565b90509250929050565b6000806000606084860312156117f4578081fd5b6117fd84611776565b925061180b60208501611776565b9150604084013590509250925092565b60008060008060808587031215611830578081fd5b61183985611776565b935061184760208601611776565b925060408501359150606085013567ffffffffffffffff811115611869578182fd5b8501601f81018713611879578182fd5b61188887823560208401611706565b91505092959194509250565b600080604083850312156118a6578182fd5b6118af83611776565b9150602083013580151581146118c3578182fd5b809150509250929050565b600080604083850312156118e0578182fd5b6118e983611776565b946020939093013593505050565b600060208284031215611908578081fd5b81356117a7816125fb565b600060208284031215611924578081fd5b81516117a7816125fb565b600060208284031215611940578081fd5b5035919050565b60008060008060008060a0878903121561195f578182fd5b8635955061196f60208801611776565b945060408701359350606087013567ffffffffffffffff80821115611992578384fd5b818901915089601f8301126119a5578384fd5b6119b48a833560208501611706565b945060808901359150808211156119c9578384fd5b818901915089601f8301126119dc578384fd5b8135818111156119ea578485fd5b8a602080830285010111156119fd578485fd5b6020830194508093505050509295509295509295565b60008151808452611a2b816020860160208601612523565b601f01601f19169290920160200192915050565b7f227d000000000000000000000000000000000000000000000000000000000000815260020190565b918252602082015260400190565b60008251611a88818460208701612523565b9190910192915050565b60008351611aa4818460208801612523565b835190830190611ab8818360208801612523565b01949350505050565b60008451611ad3818460208901612523565b7f20000000000000000000000000000000000000000000000000000000000000009083019081528451611b0d816001840160208901612523565b7f2023000000000000000000000000000000000000000000000000000000000000600192909101918201528351611b4b816003840160208801612523565b0160030195945050505050565b60007f7b226e616d65223a20220000000000000000000000000000000000000000000082528451611b9081600a850160208901612523565b80830190507f222c00000000000000000000000000000000000000000000000000000000000080600a8301527f226465736372697074696f6e223a20224d65746163726166742053756d6d6172600c8301527f79222c0000000000000000000000000000000000000000000000000000000000602c8301527f22696d616765223a220000000000000000000000000000000000000000000000602f8301528551611c41816038850160208a01612523565b60389201918201527f2261747472696275746573223a205b0000000000000000000000000000000000603a8201528351611c82816049840160208801612523565b7f5d7d00000000000000000000000000000000000000000000000000000000000060499290910191820152604b0195945050505050565b60007f7b2274726169745f74797065223a202253636f7265222c202276616c7565223a82527f202200000000000000000000000000000000000000000000000000000000000060208301528451611d17816022850160208901612523565b80830190507f227d2c00000000000000000000000000000000000000000000000000000000008060228301527f7b2274726169745f74797065223a20224372656174757265222c202276616c7560258301527f65223a202200000000000000000000000000000000000000000000000000000060458301528551611da281604a850160208a01612523565b604a9201918201527f7b2274726169745f74797065223a202254657874757265222c202276616c7565604d8201527f223a202200000000000000000000000000000000000000000000000000000000606d8201528351611e09816071840160208801612523565b611e17607182840101611a3f565b979650505050505050565b60007f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000082528251611e5a81601d850160208701612523565b91909101601d0192915050565b60008582526bffffffffffffffffffffffff198560601b1660208301528360348301528251611e9d816054850160208701612523565b9190910160540195945050505050565b6001600160a01b0391909116815260200190565b60006001600160a01b03808716835280861660208401525083604083015260806060830152611ef36080830184611a13565b9695505050505050565b901515815260200190565b90815260200190565b6000602082526117a76020830184611a13565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527f63656976657220696d706c656d656e7465720000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526028908201527f4d65726b6c654469737472696275746f723a2044726f7020616c72656164792060408201527f636c61696d65642e000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526021908201527f4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f6660408201527f2e00000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560408201527f726f206164647265737300000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201527f656e7420746f6b656e0000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201527f73206e6f74206f776e0000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560408201527f7200000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60408201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606082015260800190565b60008582526001600160a01b038516602083015283604083015260806060830152611ef36080830184611a13565b600082198211156124d4576124d46125b9565b500190565b6000826124e8576124e86125cf565b500490565b6000816000190483118215151615612507576125076125b9565b500290565b60008282101561251e5761251e6125b9565b500390565b60005b8381101561253e578181015183820152602001612526565b838111156106c95750506000910152565b60028104600182168061256357607f821691505b6020821081141561258457634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561259e5761259e6125b9565b5060010190565b6000826125b4576125b46125cf565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146109d357600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212204dace5b2ce8d27ae4305ef9adb7e2014a612f08beae3de592932dc005a8005bb64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/MerkleDistributor.sol:MerkleDistributor",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/MerkleDistributor.sol:MerkleDistributor",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 136,
        "contract": "contracts/MerkleDistributor.sol:MerkleDistributor",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 140,
        "contract": "contracts/MerkleDistributor.sol:MerkleDistributor",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 144,
        "contract": "contracts/MerkleDistributor.sol:MerkleDistributor",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 150,
        "contract": "contracts/MerkleDistributor.sol:MerkleDistributor",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/MerkleDistributor.sol:MerkleDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1822,
        "contract": "contracts/MerkleDistributor.sol:MerkleDistributor",
        "label": "count",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1829,
        "contract": "contracts/MerkleDistributor.sol:MerkleDistributor",
        "label": "claimedBitMap",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1833,
        "contract": "contracts/MerkleDistributor.sol:MerkleDistributor",
        "label": "urlMap",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      {
        "astId": 1838,
        "contract": "contracts/MerkleDistributor.sol:MerkleDistributor",
        "label": "tokenSummary",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Summary)1819_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Summary)1819_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MerkleDistributor.Summary)",
        "numberOfBytes": "32",
        "value": "t_struct(Summary)1819_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Summary)1819_storage": {
        "encoding": "inplace",
        "label": "struct MerkleDistributor.Summary",
        "members": [
          {
            "astId": 1814,
            "contract": "contracts/MerkleDistributor.sol:MerkleDistributor",
            "label": "score",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1816,
            "contract": "contracts/MerkleDistributor.sol:MerkleDistributor",
            "label": "creature",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1818,
            "contract": "contracts/MerkleDistributor.sol:MerkleDistributor",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}